;; Source grammar
;; see example1.ml

start ::= "match" id "with" patterns
patters ::= (pattern0|pattern1) pattern1+
;; pattern0 and pattern1 are needed to distinguish the first case in which we can avoid writing the vertical line
pattern0 ::= pattern 
pattern1 ::= "|" pattern
pattern ::= lexpr "->" rexpr

lexpr ::= rule (ε|condition) (ε|assignment)
rexpr ::= value ;;  todo: discuss

rule ::= wildcard|variable|constructor_pattern|or_pattern ;;

;; rules
wildcard ::= "_"
variable ::= identifier
constructor_pattern ::= int|float|char|string|bool
                        |unit|record|exn|objects|ref
                        |list|tuple|array
                        |variant|parameterized_variant ;; ocaml data types
or_pattern ::=  wildcard|variable|constructor_pattern ("|" wildcard|variable|constructor_pattern)+

condition ::= "when" bexpr
assignment ::= "as" id
bexpr ::= "(" bexpr ")" | bexpr (and|or) bexpr
           | var "(" vars ") | var id var | var vars
and ::= "&&"
or ::= "||"

vars = var vars|var
var = id

;; Target grammar ;; Todo discuss: only the pattern match portion of the code? Or everything?
;; see example1.lambda

Start ::= sexpr ;; there could be identifiers at the beginning or end that I don't know about
                ;; such as setGlobal. todo discuss
sexpr ::= "(" elements ")" ;; () should be valid but we ignore it
elements ::= (atom|variable|string|sexpr)+

string ::= "\"" identifier "\"" ;; string between doublequotes
variable ::= identifier 
atom ::=  let|catch|if|switch|switch-star|field|apply

let ::= "let" assignment sexpr ;; (assignment sexpr)+ outside of pattern match code
assignment ::= "function" variable variable+ ;; the first variable is the identifier of the function
               | variable "=a" ;; new variable declared

field ::= "field" digit variable
apply ::= "apply" variable variable

catch ::= "catch" sexpr with sexpr
with ::= "with" "(" label ")"
exit ::= "exit" label

switch-star ::= "switch*" variable cases
switch::= "switch" variable case* "default:" sexpr
case ::= "case" casevar ":" sexpr
casevar ::= ("tag"|"int") digit

if ::= "if" bexpr sexpr sexpr
bexpr ::= "(" 
            ("!="|"=="|">="|"<="|">"|"<") (variable|sexpr) digit 
            |field
          ")"

label ::= digit